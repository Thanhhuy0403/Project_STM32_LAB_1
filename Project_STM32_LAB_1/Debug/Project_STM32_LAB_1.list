
Project_STM32_LAB_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080015d4  080015d4  000115d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015f8  080015f8  00020170  2**0
                  CONTENTS
  4 .ARM          00000000  080015f8  080015f8  00020170  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015f8  080015f8  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015f8  080015f8  000115f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015fc  080015fc  000115fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08001600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000170  08001770  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08001770  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003896  00000000  00000000  00020199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000125c  00000000  00000000  00023a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  00024c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b8  00000000  00000000  00025100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000121f  00000000  00000000  000254b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000059f3  00000000  00000000  000266d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a033  00000000  00000000  0002c0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a60fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ec8  00000000  00000000  000a6150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000170 	.word	0x20000170
 8000128:	00000000 	.word	0x00000000
 800012c:	080015bc 	.word	0x080015bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000174 	.word	0x20000174
 8000148:	080015bc 	.word	0x080015bc

0800014c <InitExercise10>:

int cnt_second = -1;
int cnt_minute = 0;
int cnt_hour = 0;

void InitExercise10(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	clearAllClock();
 8000150:	f000 f9b0 	bl	80004b4 <clearAllClock>
}
 8000154:	bf00      	nop
 8000156:	bd80      	pop	{r7, pc}

08000158 <display7Seg2>:

void display7Seg2(int num){
 8000158:	b580      	push	{r7, lr}
 800015a:	b082      	sub	sp, #8
 800015c:	af00      	add	r7, sp, #0
 800015e:	6078      	str	r0, [r7, #4]
	if(num >= 10 && num < 0) return;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b09      	cmp	r3, #9
 8000164:	dd02      	ble.n	800016c <display7Seg2+0x14>
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2b00      	cmp	r3, #0
 800016a:	db6b      	blt.n	8000244 <display7Seg2+0xec>
	HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, numLed[num][0]);
 800016c:	4937      	ldr	r1, [pc, #220]	; (800024c <display7Seg2+0xf4>)
 800016e:	687a      	ldr	r2, [r7, #4]
 8000170:	4613      	mov	r3, r2
 8000172:	00db      	lsls	r3, r3, #3
 8000174:	1a9b      	subs	r3, r3, r2
 8000176:	009b      	lsls	r3, r3, #2
 8000178:	440b      	add	r3, r1
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	b2db      	uxtb	r3, r3
 800017e:	461a      	mov	r2, r3
 8000180:	2102      	movs	r1, #2
 8000182:	4833      	ldr	r0, [pc, #204]	; (8000250 <display7Seg2+0xf8>)
 8000184:	f000 fdfa 	bl	8000d7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, numLed[num][1]);
 8000188:	4930      	ldr	r1, [pc, #192]	; (800024c <display7Seg2+0xf4>)
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	4613      	mov	r3, r2
 800018e:	00db      	lsls	r3, r3, #3
 8000190:	1a9b      	subs	r3, r3, r2
 8000192:	009b      	lsls	r3, r3, #2
 8000194:	440b      	add	r3, r1
 8000196:	3304      	adds	r3, #4
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	b2db      	uxtb	r3, r3
 800019c:	461a      	mov	r2, r3
 800019e:	2104      	movs	r1, #4
 80001a0:	482b      	ldr	r0, [pc, #172]	; (8000250 <display7Seg2+0xf8>)
 80001a2:	f000 fdeb 	bl	8000d7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, numLed[num][2]);
 80001a6:	4929      	ldr	r1, [pc, #164]	; (800024c <display7Seg2+0xf4>)
 80001a8:	687a      	ldr	r2, [r7, #4]
 80001aa:	4613      	mov	r3, r2
 80001ac:	00db      	lsls	r3, r3, #3
 80001ae:	1a9b      	subs	r3, r3, r2
 80001b0:	009b      	lsls	r3, r3, #2
 80001b2:	440b      	add	r3, r1
 80001b4:	3308      	adds	r3, #8
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	461a      	mov	r2, r3
 80001bc:	2108      	movs	r1, #8
 80001be:	4824      	ldr	r0, [pc, #144]	; (8000250 <display7Seg2+0xf8>)
 80001c0:	f000 fddc 	bl	8000d7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, numLed[num][3]);
 80001c4:	4921      	ldr	r1, [pc, #132]	; (800024c <display7Seg2+0xf4>)
 80001c6:	687a      	ldr	r2, [r7, #4]
 80001c8:	4613      	mov	r3, r2
 80001ca:	00db      	lsls	r3, r3, #3
 80001cc:	1a9b      	subs	r3, r3, r2
 80001ce:	009b      	lsls	r3, r3, #2
 80001d0:	440b      	add	r3, r1
 80001d2:	330c      	adds	r3, #12
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	461a      	mov	r2, r3
 80001da:	2180      	movs	r1, #128	; 0x80
 80001dc:	481d      	ldr	r0, [pc, #116]	; (8000254 <display7Seg2+0xfc>)
 80001de:	f000 fdcd 	bl	8000d7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, numLed[num][4]);
 80001e2:	491a      	ldr	r1, [pc, #104]	; (800024c <display7Seg2+0xf4>)
 80001e4:	687a      	ldr	r2, [r7, #4]
 80001e6:	4613      	mov	r3, r2
 80001e8:	00db      	lsls	r3, r3, #3
 80001ea:	1a9b      	subs	r3, r3, r2
 80001ec:	009b      	lsls	r3, r3, #2
 80001ee:	440b      	add	r3, r1
 80001f0:	3310      	adds	r3, #16
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	461a      	mov	r2, r3
 80001f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fc:	4815      	ldr	r0, [pc, #84]	; (8000254 <display7Seg2+0xfc>)
 80001fe:	f000 fdbd 	bl	8000d7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, numLed[num][5]);
 8000202:	4912      	ldr	r1, [pc, #72]	; (800024c <display7Seg2+0xf4>)
 8000204:	687a      	ldr	r2, [r7, #4]
 8000206:	4613      	mov	r3, r2
 8000208:	00db      	lsls	r3, r3, #3
 800020a:	1a9b      	subs	r3, r3, r2
 800020c:	009b      	lsls	r3, r3, #2
 800020e:	440b      	add	r3, r1
 8000210:	3314      	adds	r3, #20
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	b2db      	uxtb	r3, r3
 8000216:	461a      	mov	r2, r3
 8000218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800021c:	480d      	ldr	r0, [pc, #52]	; (8000254 <display7Seg2+0xfc>)
 800021e:	f000 fdad 	bl	8000d7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, numLed[num][6]);
 8000222:	490a      	ldr	r1, [pc, #40]	; (800024c <display7Seg2+0xf4>)
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	4613      	mov	r3, r2
 8000228:	00db      	lsls	r3, r3, #3
 800022a:	1a9b      	subs	r3, r3, r2
 800022c:	009b      	lsls	r3, r3, #2
 800022e:	440b      	add	r3, r1
 8000230:	3318      	adds	r3, #24
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	b2db      	uxtb	r3, r3
 8000236:	461a      	mov	r2, r3
 8000238:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800023c:	4805      	ldr	r0, [pc, #20]	; (8000254 <display7Seg2+0xfc>)
 800023e:	f000 fd9d 	bl	8000d7c <HAL_GPIO_WritePin>
 8000242:	e000      	b.n	8000246 <display7Seg2+0xee>
	if(num >= 10 && num < 0) return;
 8000244:	bf00      	nop
}
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	20000004 	.word	0x20000004
 8000250:	40010800 	.word	0x40010800
 8000254:	40010c00 	.word	0x40010c00

08000258 <RunExercise10>:

void RunExercise10(){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	if(cnt_second == 60){
 800025c:	4b52      	ldr	r3, [pc, #328]	; (80003a8 <RunExercise10+0x150>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b3c      	cmp	r3, #60	; 0x3c
 8000262:	d108      	bne.n	8000276 <RunExercise10+0x1e>
		cnt_second = 0;
 8000264:	4b50      	ldr	r3, [pc, #320]	; (80003a8 <RunExercise10+0x150>)
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
		cnt_minute++;
 800026a:	4b50      	ldr	r3, [pc, #320]	; (80003ac <RunExercise10+0x154>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	3301      	adds	r3, #1
 8000270:	4a4e      	ldr	r2, [pc, #312]	; (80003ac <RunExercise10+0x154>)
 8000272:	6013      	str	r3, [r2, #0]
 8000274:	e004      	b.n	8000280 <RunExercise10+0x28>
	}else{
		cnt_second++;
 8000276:	4b4c      	ldr	r3, [pc, #304]	; (80003a8 <RunExercise10+0x150>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	3301      	adds	r3, #1
 800027c:	4a4a      	ldr	r2, [pc, #296]	; (80003a8 <RunExercise10+0x150>)
 800027e:	6013      	str	r3, [r2, #0]
	}

	if(cnt_minute == 60){
 8000280:	4b4a      	ldr	r3, [pc, #296]	; (80003ac <RunExercise10+0x154>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b3c      	cmp	r3, #60	; 0x3c
 8000286:	d10a      	bne.n	800029e <RunExercise10+0x46>
		cnt_minute = 0;
 8000288:	4b48      	ldr	r3, [pc, #288]	; (80003ac <RunExercise10+0x154>)
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
		clearNumberOnClock(11);
 800028e:	200b      	movs	r0, #11
 8000290:	f000 f94a 	bl	8000528 <clearNumberOnClock>
		cnt_hour++;
 8000294:	4b46      	ldr	r3, [pc, #280]	; (80003b0 <RunExercise10+0x158>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	3301      	adds	r3, #1
 800029a:	4a45      	ldr	r2, [pc, #276]	; (80003b0 <RunExercise10+0x158>)
 800029c:	6013      	str	r3, [r2, #0]
	}

	if(cnt_hour == 12){
 800029e:	4b44      	ldr	r3, [pc, #272]	; (80003b0 <RunExercise10+0x158>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b0c      	cmp	r3, #12
 80002a4:	d105      	bne.n	80002b2 <RunExercise10+0x5a>
		cnt_hour = 0;
 80002a6:	4b42      	ldr	r3, [pc, #264]	; (80003b0 <RunExercise10+0x158>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
		clearNumberOnClock(11);
 80002ac:	200b      	movs	r0, #11
 80002ae:	f000 f93b 	bl	8000528 <clearNumberOnClock>
	}

	// handle clock second
	if(cnt_second%12 == 0){
 80002b2:	4b3d      	ldr	r3, [pc, #244]	; (80003a8 <RunExercise10+0x150>)
 80002b4:	6819      	ldr	r1, [r3, #0]
 80002b6:	4b3f      	ldr	r3, [pc, #252]	; (80003b4 <RunExercise10+0x15c>)
 80002b8:	fb83 2301 	smull	r2, r3, r3, r1
 80002bc:	105a      	asrs	r2, r3, #1
 80002be:	17cb      	asrs	r3, r1, #31
 80002c0:	1ad2      	subs	r2, r2, r3
 80002c2:	4613      	mov	r3, r2
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	4413      	add	r3, r2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	1aca      	subs	r2, r1, r3
 80002cc:	2a00      	cmp	r2, #0
 80002ce:	d103      	bne.n	80002d8 <RunExercise10+0x80>
		clearNumberOnClock(11);
 80002d0:	200b      	movs	r0, #11
 80002d2:	f000 f929 	bl	8000528 <clearNumberOnClock>
 80002d6:	e010      	b.n	80002fa <RunExercise10+0xa2>
	}else{
		clearAllClock((cnt_second-1)%12);
 80002d8:	4b33      	ldr	r3, [pc, #204]	; (80003a8 <RunExercise10+0x150>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	1e5a      	subs	r2, r3, #1
 80002de:	4b35      	ldr	r3, [pc, #212]	; (80003b4 <RunExercise10+0x15c>)
 80002e0:	fb83 1302 	smull	r1, r3, r3, r2
 80002e4:	1059      	asrs	r1, r3, #1
 80002e6:	17d3      	asrs	r3, r2, #31
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	460b      	mov	r3, r1
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	440b      	add	r3, r1
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	1ad1      	subs	r1, r2, r3
 80002f4:	4608      	mov	r0, r1
 80002f6:	f000 f8dd 	bl	80004b4 <clearAllClock>
	}
	setNumberOnClock(cnt_second%12);
 80002fa:	4b2b      	ldr	r3, [pc, #172]	; (80003a8 <RunExercise10+0x150>)
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	4b2d      	ldr	r3, [pc, #180]	; (80003b4 <RunExercise10+0x15c>)
 8000300:	fb83 1302 	smull	r1, r3, r3, r2
 8000304:	1059      	asrs	r1, r3, #1
 8000306:	17d3      	asrs	r3, r2, #31
 8000308:	1ac9      	subs	r1, r1, r3
 800030a:	460b      	mov	r3, r1
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	440b      	add	r3, r1
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	1ad1      	subs	r1, r2, r3
 8000314:	4608      	mov	r0, r1
 8000316:	f000 f8ef 	bl	80004f8 <setNumberOnClock>

	// handle minute
	if(cnt_minute%5 == 0){
 800031a:	4b24      	ldr	r3, [pc, #144]	; (80003ac <RunExercise10+0x154>)
 800031c:	6819      	ldr	r1, [r3, #0]
 800031e:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <RunExercise10+0x160>)
 8000320:	fb83 2301 	smull	r2, r3, r3, r1
 8000324:	105a      	asrs	r2, r3, #1
 8000326:	17cb      	asrs	r3, r1, #31
 8000328:	1ad2      	subs	r2, r2, r3
 800032a:	4613      	mov	r3, r2
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	4413      	add	r3, r2
 8000330:	1aca      	subs	r2, r1, r3
 8000332:	2a00      	cmp	r2, #0
 8000334:	d10b      	bne.n	800034e <RunExercise10+0xf6>
		clearNumberOnClock(cnt_minute/5-1);
 8000336:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <RunExercise10+0x154>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4a1f      	ldr	r2, [pc, #124]	; (80003b8 <RunExercise10+0x160>)
 800033c:	fb82 1203 	smull	r1, r2, r2, r3
 8000340:	1052      	asrs	r2, r2, #1
 8000342:	17db      	asrs	r3, r3, #31
 8000344:	1ad3      	subs	r3, r2, r3
 8000346:	3b01      	subs	r3, #1
 8000348:	4618      	mov	r0, r3
 800034a:	f000 f8ed 	bl	8000528 <clearNumberOnClock>
	}
	setNumberOnClock(cnt_minute/5);
 800034e:	4b17      	ldr	r3, [pc, #92]	; (80003ac <RunExercise10+0x154>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a19      	ldr	r2, [pc, #100]	; (80003b8 <RunExercise10+0x160>)
 8000354:	fb82 1203 	smull	r1, r2, r2, r3
 8000358:	1052      	asrs	r2, r2, #1
 800035a:	17db      	asrs	r3, r3, #31
 800035c:	1ad3      	subs	r3, r2, r3
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f8ca 	bl	80004f8 <setNumberOnClock>

	// handle hour
	setNumberOnClock(cnt_hour);
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <RunExercise10+0x158>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4618      	mov	r0, r3
 800036a:	f000 f8c5 	bl	80004f8 <setNumberOnClock>

	display7SEG(cnt_minute%5);
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <RunExercise10+0x154>)
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <RunExercise10+0x160>)
 8000374:	fb83 1302 	smull	r1, r3, r3, r2
 8000378:	1059      	asrs	r1, r3, #1
 800037a:	17d3      	asrs	r3, r2, #31
 800037c:	1ac9      	subs	r1, r1, r3
 800037e:	460b      	mov	r3, r1
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	440b      	add	r3, r1
 8000384:	1ad1      	subs	r1, r2, r3
 8000386:	4608      	mov	r0, r1
 8000388:	f000 f818 	bl	80003bc <display7SEG>
	display7Seg2(cnt_second/12);
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <RunExercise10+0x150>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a08      	ldr	r2, [pc, #32]	; (80003b4 <RunExercise10+0x15c>)
 8000392:	fb82 1203 	smull	r1, r2, r2, r3
 8000396:	1052      	asrs	r2, r2, #1
 8000398:	17db      	asrs	r3, r3, #31
 800039a:	1ad3      	subs	r3, r2, r3
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff fedb 	bl	8000158 <display7Seg2>
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000000 	.word	0x20000000
 80003ac:	2000018c 	.word	0x2000018c
 80003b0:	20000190 	.word	0x20000190
 80003b4:	2aaaaaab 	.word	0x2aaaaaab
 80003b8:	66666667 	.word	0x66666667

080003bc <display7SEG>:
	HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
}

void display7SEG(int num){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	if(num >= 10 && num < 0) return;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2b09      	cmp	r3, #9
 80003c8:	dd02      	ble.n	80003d0 <display7SEG+0x14>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	db68      	blt.n	80004a2 <display7SEG+0xe6>
	HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, numLed[num][0]);
 80003d0:	4936      	ldr	r1, [pc, #216]	; (80004ac <display7SEG+0xf0>)
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	4613      	mov	r3, r2
 80003d6:	00db      	lsls	r3, r3, #3
 80003d8:	1a9b      	subs	r3, r3, r2
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	440b      	add	r3, r1
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	461a      	mov	r2, r3
 80003e4:	2101      	movs	r1, #1
 80003e6:	4832      	ldr	r0, [pc, #200]	; (80004b0 <display7SEG+0xf4>)
 80003e8:	f000 fcc8 	bl	8000d7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, numLed[num][1]);
 80003ec:	492f      	ldr	r1, [pc, #188]	; (80004ac <display7SEG+0xf0>)
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	4613      	mov	r3, r2
 80003f2:	00db      	lsls	r3, r3, #3
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	440b      	add	r3, r1
 80003fa:	3304      	adds	r3, #4
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	461a      	mov	r2, r3
 8000402:	2102      	movs	r1, #2
 8000404:	482a      	ldr	r0, [pc, #168]	; (80004b0 <display7SEG+0xf4>)
 8000406:	f000 fcb9 	bl	8000d7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, numLed[num][2]);
 800040a:	4928      	ldr	r1, [pc, #160]	; (80004ac <display7SEG+0xf0>)
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	4613      	mov	r3, r2
 8000410:	00db      	lsls	r3, r3, #3
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	440b      	add	r3, r1
 8000418:	3308      	adds	r3, #8
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	b2db      	uxtb	r3, r3
 800041e:	461a      	mov	r2, r3
 8000420:	2104      	movs	r1, #4
 8000422:	4823      	ldr	r0, [pc, #140]	; (80004b0 <display7SEG+0xf4>)
 8000424:	f000 fcaa 	bl	8000d7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, numLed[num][3]);
 8000428:	4920      	ldr	r1, [pc, #128]	; (80004ac <display7SEG+0xf0>)
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	4613      	mov	r3, r2
 800042e:	00db      	lsls	r3, r3, #3
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	440b      	add	r3, r1
 8000436:	330c      	adds	r3, #12
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	b2db      	uxtb	r3, r3
 800043c:	461a      	mov	r2, r3
 800043e:	2108      	movs	r1, #8
 8000440:	481b      	ldr	r0, [pc, #108]	; (80004b0 <display7SEG+0xf4>)
 8000442:	f000 fc9b 	bl	8000d7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, numLed[num][4]);
 8000446:	4919      	ldr	r1, [pc, #100]	; (80004ac <display7SEG+0xf0>)
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	4613      	mov	r3, r2
 800044c:	00db      	lsls	r3, r3, #3
 800044e:	1a9b      	subs	r3, r3, r2
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	440b      	add	r3, r1
 8000454:	3310      	adds	r3, #16
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	b2db      	uxtb	r3, r3
 800045a:	461a      	mov	r2, r3
 800045c:	2110      	movs	r1, #16
 800045e:	4814      	ldr	r0, [pc, #80]	; (80004b0 <display7SEG+0xf4>)
 8000460:	f000 fc8c 	bl	8000d7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, numLed[num][5]);
 8000464:	4911      	ldr	r1, [pc, #68]	; (80004ac <display7SEG+0xf0>)
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	4613      	mov	r3, r2
 800046a:	00db      	lsls	r3, r3, #3
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	440b      	add	r3, r1
 8000472:	3314      	adds	r3, #20
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	461a      	mov	r2, r3
 800047a:	2120      	movs	r1, #32
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <display7SEG+0xf4>)
 800047e:	f000 fc7d 	bl	8000d7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, numLed[num][6]);
 8000482:	490a      	ldr	r1, [pc, #40]	; (80004ac <display7SEG+0xf0>)
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	4613      	mov	r3, r2
 8000488:	00db      	lsls	r3, r3, #3
 800048a:	1a9b      	subs	r3, r3, r2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	440b      	add	r3, r1
 8000490:	3318      	adds	r3, #24
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	b2db      	uxtb	r3, r3
 8000496:	461a      	mov	r2, r3
 8000498:	2140      	movs	r1, #64	; 0x40
 800049a:	4805      	ldr	r0, [pc, #20]	; (80004b0 <display7SEG+0xf4>)
 800049c:	f000 fc6e 	bl	8000d7c <HAL_GPIO_WritePin>
 80004a0:	e000      	b.n	80004a4 <display7SEG+0xe8>
	if(num >= 10 && num < 0) return;
 80004a2:	bf00      	nop
}
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000004 	.word	0x20000004
 80004b0:	40010c00 	.word	0x40010c00

080004b4 <clearAllClock>:
		HAL_Delay(1000);
	}
}

// Exercise7
void clearAllClock(){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 12; i++){
 80004ba:	2300      	movs	r3, #0
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	e00e      	b.n	80004de <clearAllClock+0x2a>
		HAL_GPIO_WritePin(LED_GPIO_Ports[i], LED_Pins[i], GPIO_PIN_SET);
 80004c0:	4a0b      	ldr	r2, [pc, #44]	; (80004f0 <clearAllClock+0x3c>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004c8:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <clearAllClock+0x40>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004d0:	2201      	movs	r2, #1
 80004d2:	4619      	mov	r1, r3
 80004d4:	f000 fc52 	bl	8000d7c <HAL_GPIO_WritePin>
	for(int i = 0; i < 12; i++){
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	3301      	adds	r3, #1
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2b0b      	cmp	r3, #11
 80004e2:	dded      	ble.n	80004c0 <clearAllClock+0xc>
	}
}
 80004e4:	bf00      	nop
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	2000011c 	.word	0x2000011c
 80004f4:	2000014c 	.word	0x2000014c

080004f8 <setNumberOnClock>:

// Exercise8
void setNumberOnClock(int num){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Ports[num], LED_Pins[num], GPIO_PIN_RESET);
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <setNumberOnClock+0x28>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <setNumberOnClock+0x2c>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000510:	2200      	movs	r2, #0
 8000512:	4619      	mov	r1, r3
 8000514:	f000 fc32 	bl	8000d7c <HAL_GPIO_WritePin>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	2000011c 	.word	0x2000011c
 8000524:	2000014c 	.word	0x2000014c

08000528 <clearNumberOnClock>:

// Exercise9
void clearNumberOnClock(int num){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Ports[num], LED_Pins[num], GPIO_PIN_SET);
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <clearNumberOnClock+0x28>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <clearNumberOnClock+0x2c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000540:	2201      	movs	r2, #1
 8000542:	4619      	mov	r1, r3
 8000544:	f000 fc1a 	bl	8000d7c <HAL_GPIO_WritePin>
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000011c 	.word	0x2000011c
 8000554:	2000014c 	.word	0x2000014c

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 f92a 	bl	80007b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f80b 	bl	800057a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 f844 	bl	80005f0 <MX_GPIO_Init>
//  InitExercise1();
//  InitExercise2();
//  InitExercise3();
//  InitExercise4();
//  InitExercise6();
  InitExercise10();
 8000568:	f7ff fdf0 	bl	800014c <InitExercise10>
//	  RunExercise4();
//	  RunExercise5();
//	  RunExercise6();
//	  setNumberOnClock(7);
//	  display7Seg2(4);
	  RunExercise10();
 800056c:	f7ff fe74 	bl	8000258 <RunExercise10>

	  HAL_Delay(1000);
 8000570:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000574:	f000 f980 	bl	8000878 <HAL_Delay>
	  RunExercise10();
 8000578:	e7f8      	b.n	800056c <main+0x14>

0800057a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	b090      	sub	sp, #64	; 0x40
 800057e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	2228      	movs	r2, #40	; 0x28
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f001 f80f 	bl	80015ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0318 	add.w	r3, r7, #24
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fbfb 	bl	8000dac <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005bc:	f000 f86e 	bl	800069c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fe67 	bl	80012ac <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005e4:	f000 f85a 	bl	800069c <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3740      	adds	r7, #64	; 0x40
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <MX_GPIO_Init+0xa0>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <MX_GPIO_Init+0xa0>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <MX_GPIO_Init+0xa0>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <MX_GPIO_Init+0xa0>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <MX_GPIO_Init+0xa0>)
 8000622:	f043 0308 	orr.w	r3, r3, #8
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <MX_GPIO_Init+0xa0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0308 	and.w	r3, r3, #8
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG2_0_Pin|SEG2_1_Pin|SEG2_2_Pin|LED_Clock_0_Pin
 8000634:	2200      	movs	r2, #0
 8000636:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800063a:	4816      	ldr	r0, [pc, #88]	; (8000694 <MX_GPIO_Init+0xa4>)
 800063c:	f000 fb9e 	bl	8000d7c <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_2_Pin
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|LED_Clock_7_Pin|LED_Clock_8_Pin
                          |LED_Clock_9_Pin|LED_Clock_10_Pin|LED_Clock_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG2_6_Pin
 8000640:	2200      	movs	r2, #0
 8000642:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000646:	4814      	ldr	r0, [pc, #80]	; (8000698 <MX_GPIO_Init+0xa8>)
 8000648:	f000 fb98 	bl	8000d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG2_0_Pin SEG2_1_Pin SEG2_2_Pin LED_Clock_0_Pin
                           LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin LED_Clock_7_Pin LED_Clock_8_Pin
                           LED_Clock_9_Pin LED_Clock_10_Pin LED_Clock_11_Pin */
  GPIO_InitStruct.Pin = SEG2_0_Pin|SEG2_1_Pin|SEG2_2_Pin|LED_Clock_0_Pin
 800064c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000650:	60bb      	str	r3, [r7, #8]
                          |LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_2_Pin
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|LED_Clock_7_Pin|LED_Clock_8_Pin
                          |LED_Clock_9_Pin|LED_Clock_10_Pin|LED_Clock_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2302      	movs	r3, #2
 800065c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	4619      	mov	r1, r3
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <MX_GPIO_Init+0xa4>)
 8000666:	f000 fa0f 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG2_6_Pin
                           SEG_3_Pin SEG_4_Pin SEG_5_Pin SEG_6_Pin
                           SEG2_3_Pin SEG2_4_Pin SEG2_5_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG2_6_Pin
 800066a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800066e:	60bb      	str	r3, [r7, #8]
                          |SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|SEG_6_Pin
                          |SEG2_3_Pin|SEG2_4_Pin|SEG2_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2302      	movs	r3, #2
 800067a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	4619      	mov	r1, r3
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_GPIO_Init+0xa8>)
 8000684:	f000 fa00 	bl	8000a88 <HAL_GPIO_Init>

}
 8000688:	bf00      	nop
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000
 8000694:	40010800 	.word	0x40010800
 8000698:	40010c00 	.word	0x40010c00

0800069c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <Error_Handler+0x8>
	...

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <HAL_MspInit+0x5c>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4a14      	ldr	r2, [pc, #80]	; (8000704 <HAL_MspInit+0x5c>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6193      	str	r3, [r2, #24]
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_MspInit+0x5c>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <HAL_MspInit+0x5c>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <HAL_MspInit+0x5c>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <HAL_MspInit+0x5c>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <HAL_MspInit+0x60>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	4a04      	ldr	r2, [pc, #16]	; (8000708 <HAL_MspInit+0x60>)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	40021000 	.word	0x40021000
 8000708:	40010000 	.word	0x40010000

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <NMI_Handler+0x4>

08000712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler+0x4>

08000718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <MemManage_Handler+0x4>

0800071e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <BusFault_Handler+0x4>

08000724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <UsageFault_Handler+0x4>

0800072a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000752:	f000 f875 	bl	8000840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}

0800075a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
	...

08000768 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000768:	f7ff fff7 	bl	800075a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800076e:	490c      	ldr	r1, [pc, #48]	; (80007a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000770:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000774:	e002      	b.n	800077c <LoopCopyDataInit>

08000776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077a:	3304      	adds	r3, #4

0800077c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800077c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000780:	d3f9      	bcc.n	8000776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000782:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000784:	4c09      	ldr	r4, [pc, #36]	; (80007ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000788:	e001      	b.n	800078e <LoopFillZerobss>

0800078a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800078c:	3204      	adds	r2, #4

0800078e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000790:	d3fb      	bcc.n	800078a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000792:	f000 fee7 	bl	8001564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000796:	f7ff fedf 	bl	8000558 <main>
  bx lr
 800079a:	4770      	bx	lr
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80007a4:	08001600 	.word	0x08001600
  ldr r2, =_sbss
 80007a8:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80007ac:	20000198 	.word	0x20000198

080007b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_2_IRQHandler>
	...

080007b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_Init+0x28>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a07      	ldr	r2, [pc, #28]	; (80007dc <HAL_Init+0x28>)
 80007be:	f043 0310 	orr.w	r3, r3, #16
 80007c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f92b 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ca:	200f      	movs	r0, #15
 80007cc:	f000 f808 	bl	80007e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d0:	f7ff ff6a 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40022000 	.word	0x40022000

080007e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_InitTick+0x54>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_InitTick+0x58>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f935 	bl	8000a6e <HAL_SYSTICK_Config>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e00e      	b.n	800082c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b0f      	cmp	r3, #15
 8000812:	d80a      	bhi.n	800082a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000814:	2200      	movs	r2, #0
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f000 f90b 	bl	8000a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000820:	4a06      	ldr	r2, [pc, #24]	; (800083c <HAL_InitTick+0x5c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	e000      	b.n	800082c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000164 	.word	0x20000164
 8000838:	2000016c 	.word	0x2000016c
 800083c:	20000168 	.word	0x20000168

08000840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x1c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_IncTick+0x20>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a03      	ldr	r2, [pc, #12]	; (8000860 <HAL_IncTick+0x20>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	2000016c 	.word	0x2000016c
 8000860:	20000194 	.word	0x20000194

08000864 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b02      	ldr	r3, [pc, #8]	; (8000874 <HAL_GetTick+0x10>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	20000194 	.word	0x20000194

08000878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000880:	f7ff fff0 	bl	8000864 <HAL_GetTick>
 8000884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000890:	d005      	beq.n	800089e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_Delay+0x44>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	4413      	add	r3, r2
 800089c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800089e:	bf00      	nop
 80008a0:	f7ff ffe0 	bl	8000864 <HAL_GetTick>
 80008a4:	4602      	mov	r2, r0
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d8f7      	bhi.n	80008a0 <HAL_Delay+0x28>
  {
  }
}
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000016c 	.word	0x2000016c

080008c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008dc:	4013      	ands	r3, r2
 80008de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	60d3      	str	r3, [r2, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <__NVIC_GetPriorityGrouping+0x18>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	f003 0307 	and.w	r3, r3, #7
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	; (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	; 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009ec:	d301      	bcc.n	80009f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00f      	b.n	8000a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <SysTick_Config+0x40>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fa:	210f      	movs	r1, #15
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f7ff ff90 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <SysTick_Config+0x40>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <SysTick_Config+0x40>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff49 	bl	80008c0 <__NVIC_SetPriorityGrouping>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a48:	f7ff ff5e 	bl	8000908 <__NVIC_GetPriorityGrouping>
 8000a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	68b9      	ldr	r1, [r7, #8]
 8000a52:	6978      	ldr	r0, [r7, #20]
 8000a54:	f7ff ff90 	bl	8000978 <NVIC_EncodePriority>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff5f 	bl	8000924 <__NVIC_SetPriority>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ffb0 	bl	80009dc <SysTick_Config>
 8000a7c:	4603      	mov	r3, r0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b08b      	sub	sp, #44	; 0x2c
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9a:	e148      	b.n	8000d2e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	69fa      	ldr	r2, [r7, #28]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	f040 8137 	bne.w	8000d28 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	4aa3      	ldr	r2, [pc, #652]	; (8000d4c <HAL_GPIO_Init+0x2c4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d05e      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ac4:	4aa1      	ldr	r2, [pc, #644]	; (8000d4c <HAL_GPIO_Init+0x2c4>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d875      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000aca:	4aa1      	ldr	r2, [pc, #644]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d058      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ad0:	4a9f      	ldr	r2, [pc, #636]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d86f      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000ad6:	4a9f      	ldr	r2, [pc, #636]	; (8000d54 <HAL_GPIO_Init+0x2cc>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d052      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000adc:	4a9d      	ldr	r2, [pc, #628]	; (8000d54 <HAL_GPIO_Init+0x2cc>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d869      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000ae2:	4a9d      	ldr	r2, [pc, #628]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d04c      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ae8:	4a9b      	ldr	r2, [pc, #620]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d863      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000aee:	4a9b      	ldr	r2, [pc, #620]	; (8000d5c <HAL_GPIO_Init+0x2d4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d046      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000af4:	4a99      	ldr	r2, [pc, #612]	; (8000d5c <HAL_GPIO_Init+0x2d4>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d85d      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000afa:	2b12      	cmp	r3, #18
 8000afc:	d82a      	bhi.n	8000b54 <HAL_GPIO_Init+0xcc>
 8000afe:	2b12      	cmp	r3, #18
 8000b00:	d859      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000b02:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <HAL_GPIO_Init+0x80>)
 8000b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b08:	08000b83 	.word	0x08000b83
 8000b0c:	08000b5d 	.word	0x08000b5d
 8000b10:	08000b6f 	.word	0x08000b6f
 8000b14:	08000bb1 	.word	0x08000bb1
 8000b18:	08000bb7 	.word	0x08000bb7
 8000b1c:	08000bb7 	.word	0x08000bb7
 8000b20:	08000bb7 	.word	0x08000bb7
 8000b24:	08000bb7 	.word	0x08000bb7
 8000b28:	08000bb7 	.word	0x08000bb7
 8000b2c:	08000bb7 	.word	0x08000bb7
 8000b30:	08000bb7 	.word	0x08000bb7
 8000b34:	08000bb7 	.word	0x08000bb7
 8000b38:	08000bb7 	.word	0x08000bb7
 8000b3c:	08000bb7 	.word	0x08000bb7
 8000b40:	08000bb7 	.word	0x08000bb7
 8000b44:	08000bb7 	.word	0x08000bb7
 8000b48:	08000bb7 	.word	0x08000bb7
 8000b4c:	08000b65 	.word	0x08000b65
 8000b50:	08000b79 	.word	0x08000b79
 8000b54:	4a82      	ldr	r2, [pc, #520]	; (8000d60 <HAL_GPIO_Init+0x2d8>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d013      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b5a:	e02c      	b.n	8000bb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	623b      	str	r3, [r7, #32]
          break;
 8000b62:	e029      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	623b      	str	r3, [r7, #32]
          break;
 8000b6c:	e024      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	3308      	adds	r3, #8
 8000b74:	623b      	str	r3, [r7, #32]
          break;
 8000b76:	e01f      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	330c      	adds	r3, #12
 8000b7e:	623b      	str	r3, [r7, #32]
          break;
 8000b80:	e01a      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e013      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d105      	bne.n	8000ba4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b98:	2308      	movs	r3, #8
 8000b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69fa      	ldr	r2, [r7, #28]
 8000ba0:	611a      	str	r2, [r3, #16]
          break;
 8000ba2:	e009      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69fa      	ldr	r2, [r7, #28]
 8000bac:	615a      	str	r2, [r3, #20]
          break;
 8000bae:	e003      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
          break;
 8000bb4:	e000      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          break;
 8000bb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	2bff      	cmp	r3, #255	; 0xff
 8000bbc:	d801      	bhi.n	8000bc2 <HAL_GPIO_Init+0x13a>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	e001      	b.n	8000bc6 <HAL_GPIO_Init+0x13e>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	2bff      	cmp	r3, #255	; 0xff
 8000bcc:	d802      	bhi.n	8000bd4 <HAL_GPIO_Init+0x14c>
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	e002      	b.n	8000bda <HAL_GPIO_Init+0x152>
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	3b08      	subs	r3, #8
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	210f      	movs	r1, #15
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	401a      	ands	r2, r3
 8000bec:	6a39      	ldr	r1, [r7, #32]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 8090 	beq.w	8000d28 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c08:	4b56      	ldr	r3, [pc, #344]	; (8000d64 <HAL_GPIO_Init+0x2dc>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a55      	ldr	r2, [pc, #340]	; (8000d64 <HAL_GPIO_Init+0x2dc>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b53      	ldr	r3, [pc, #332]	; (8000d64 <HAL_GPIO_Init+0x2dc>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c20:	4a51      	ldr	r2, [pc, #324]	; (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	3302      	adds	r3, #2
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4013      	ands	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a49      	ldr	r2, [pc, #292]	; (8000d6c <HAL_GPIO_Init+0x2e4>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d00d      	beq.n	8000c68 <HAL_GPIO_Init+0x1e0>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a48      	ldr	r2, [pc, #288]	; (8000d70 <HAL_GPIO_Init+0x2e8>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d007      	beq.n	8000c64 <HAL_GPIO_Init+0x1dc>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a47      	ldr	r2, [pc, #284]	; (8000d74 <HAL_GPIO_Init+0x2ec>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d101      	bne.n	8000c60 <HAL_GPIO_Init+0x1d8>
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	e004      	b.n	8000c6a <HAL_GPIO_Init+0x1e2>
 8000c60:	2303      	movs	r3, #3
 8000c62:	e002      	b.n	8000c6a <HAL_GPIO_Init+0x1e2>
 8000c64:	2301      	movs	r3, #1
 8000c66:	e000      	b.n	8000c6a <HAL_GPIO_Init+0x1e2>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c6c:	f002 0203 	and.w	r2, r2, #3
 8000c70:	0092      	lsls	r2, r2, #2
 8000c72:	4093      	lsls	r3, r2
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c7a:	493b      	ldr	r1, [pc, #236]	; (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	3302      	adds	r3, #2
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d006      	beq.n	8000ca2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c94:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	4937      	ldr	r1, [pc, #220]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	608b      	str	r3, [r1, #8]
 8000ca0:	e006      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ca2:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	4933      	ldr	r1, [pc, #204]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000cac:	4013      	ands	r3, r2
 8000cae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d006      	beq.n	8000cca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	492d      	ldr	r1, [pc, #180]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	60cb      	str	r3, [r1, #12]
 8000cc8:	e006      	b.n	8000cd8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cca:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	4929      	ldr	r1, [pc, #164]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d006      	beq.n	8000cf2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	4923      	ldr	r1, [pc, #140]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	604b      	str	r3, [r1, #4]
 8000cf0:	e006      	b.n	8000d00 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	491f      	ldr	r1, [pc, #124]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d006      	beq.n	8000d1a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4919      	ldr	r1, [pc, #100]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	600b      	str	r3, [r1, #0]
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	4915      	ldr	r1, [pc, #84]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d34:	fa22 f303 	lsr.w	r3, r2, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f47f aeaf 	bne.w	8000a9c <HAL_GPIO_Init+0x14>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	372c      	adds	r7, #44	; 0x2c
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	10320000 	.word	0x10320000
 8000d50:	10310000 	.word	0x10310000
 8000d54:	10220000 	.word	0x10220000
 8000d58:	10210000 	.word	0x10210000
 8000d5c:	10120000 	.word	0x10120000
 8000d60:	10110000 	.word	0x10110000
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	40010800 	.word	0x40010800
 8000d70:	40010c00 	.word	0x40010c00
 8000d74:	40011000 	.word	0x40011000
 8000d78:	40010400 	.word	0x40010400

08000d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d8c:	787b      	ldrb	r3, [r7, #1]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d92:	887a      	ldrh	r2, [r7, #2]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d98:	e003      	b.n	8000da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d9a:	887b      	ldrh	r3, [r7, #2]
 8000d9c:	041a      	lsls	r2, r3, #16
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	611a      	str	r2, [r3, #16]
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e26c      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 8087 	beq.w	8000eda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dcc:	4b92      	ldr	r3, [pc, #584]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 030c 	and.w	r3, r3, #12
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d00c      	beq.n	8000df2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dd8:	4b8f      	ldr	r3, [pc, #572]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 030c 	and.w	r3, r3, #12
 8000de0:	2b08      	cmp	r3, #8
 8000de2:	d112      	bne.n	8000e0a <HAL_RCC_OscConfig+0x5e>
 8000de4:	4b8c      	ldr	r3, [pc, #560]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df0:	d10b      	bne.n	8000e0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df2:	4b89      	ldr	r3, [pc, #548]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d06c      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x12c>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d168      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e246      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e12:	d106      	bne.n	8000e22 <HAL_RCC_OscConfig+0x76>
 8000e14:	4b80      	ldr	r3, [pc, #512]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a7f      	ldr	r2, [pc, #508]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	e02e      	b.n	8000e80 <HAL_RCC_OscConfig+0xd4>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <HAL_RCC_OscConfig+0x98>
 8000e2a:	4b7b      	ldr	r3, [pc, #492]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a7a      	ldr	r2, [pc, #488]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	4b78      	ldr	r3, [pc, #480]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a77      	ldr	r2, [pc, #476]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	e01d      	b.n	8000e80 <HAL_RCC_OscConfig+0xd4>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e4c:	d10c      	bne.n	8000e68 <HAL_RCC_OscConfig+0xbc>
 8000e4e:	4b72      	ldr	r3, [pc, #456]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a71      	ldr	r2, [pc, #452]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	4b6f      	ldr	r3, [pc, #444]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a6e      	ldr	r2, [pc, #440]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e00b      	b.n	8000e80 <HAL_RCC_OscConfig+0xd4>
 8000e68:	4b6b      	ldr	r3, [pc, #428]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a6a      	ldr	r2, [pc, #424]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	4b68      	ldr	r3, [pc, #416]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a67      	ldr	r2, [pc, #412]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d013      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e88:	f7ff fcec 	bl	8000864 <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8e:	e008      	b.n	8000ea2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e90:	f7ff fce8 	bl	8000864 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b64      	cmp	r3, #100	; 0x64
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e1fa      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea2:	4b5d      	ldr	r3, [pc, #372]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f0      	beq.n	8000e90 <HAL_RCC_OscConfig+0xe4>
 8000eae:	e014      	b.n	8000eda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fcd8 	bl	8000864 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eb8:	f7ff fcd4 	bl	8000864 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b64      	cmp	r3, #100	; 0x64
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e1e6      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eca:	4b53      	ldr	r3, [pc, #332]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f0      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x10c>
 8000ed6:	e000      	b.n	8000eda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d063      	beq.n	8000fae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ee6:	4b4c      	ldr	r3, [pc, #304]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 030c 	and.w	r3, r3, #12
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d00b      	beq.n	8000f0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ef2:	4b49      	ldr	r3, [pc, #292]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
 8000efa:	2b08      	cmp	r3, #8
 8000efc:	d11c      	bne.n	8000f38 <HAL_RCC_OscConfig+0x18c>
 8000efe:	4b46      	ldr	r3, [pc, #280]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d116      	bne.n	8000f38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f0a:	4b43      	ldr	r3, [pc, #268]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d005      	beq.n	8000f22 <HAL_RCC_OscConfig+0x176>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d001      	beq.n	8000f22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e1ba      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f22:	4b3d      	ldr	r3, [pc, #244]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	4939      	ldr	r1, [pc, #228]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	4313      	orrs	r3, r2
 8000f34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f36:	e03a      	b.n	8000fae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d020      	beq.n	8000f82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f40:	4b36      	ldr	r3, [pc, #216]	; (800101c <HAL_RCC_OscConfig+0x270>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f46:	f7ff fc8d 	bl	8000864 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f4e:	f7ff fc89 	bl	8000864 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e19b      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f60:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0f0      	beq.n	8000f4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	4927      	ldr	r1, [pc, #156]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	600b      	str	r3, [r1, #0]
 8000f80:	e015      	b.n	8000fae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <HAL_RCC_OscConfig+0x270>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f88:	f7ff fc6c 	bl	8000864 <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f90:	f7ff fc68 	bl	8000864 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e17a      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1f0      	bne.n	8000f90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d03a      	beq.n	8001030 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d019      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <HAL_RCC_OscConfig+0x274>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc8:	f7ff fc4c 	bl	8000864 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd0:	f7ff fc48 	bl	8000864 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e15a      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f0      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f000 fa9a 	bl	8001528 <RCC_Delay>
 8000ff4:	e01c      	b.n	8001030 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_RCC_OscConfig+0x274>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffc:	f7ff fc32 	bl	8000864 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001002:	e00f      	b.n	8001024 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001004:	f7ff fc2e 	bl	8000864 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d908      	bls.n	8001024 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e140      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	42420000 	.word	0x42420000
 8001020:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001024:	4b9e      	ldr	r3, [pc, #632]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1e9      	bne.n	8001004 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 80a6 	beq.w	800118a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001042:	4b97      	ldr	r3, [pc, #604]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10d      	bne.n	800106a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b94      	ldr	r3, [pc, #592]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	4a93      	ldr	r2, [pc, #588]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001058:	61d3      	str	r3, [r2, #28]
 800105a:	4b91      	ldr	r3, [pc, #580]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001066:	2301      	movs	r3, #1
 8001068:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800106a:	4b8e      	ldr	r3, [pc, #568]	; (80012a4 <HAL_RCC_OscConfig+0x4f8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001072:	2b00      	cmp	r3, #0
 8001074:	d118      	bne.n	80010a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001076:	4b8b      	ldr	r3, [pc, #556]	; (80012a4 <HAL_RCC_OscConfig+0x4f8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a8a      	ldr	r2, [pc, #552]	; (80012a4 <HAL_RCC_OscConfig+0x4f8>)
 800107c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001082:	f7ff fbef 	bl	8000864 <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800108a:	f7ff fbeb 	bl	8000864 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b64      	cmp	r3, #100	; 0x64
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e0fd      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109c:	4b81      	ldr	r3, [pc, #516]	; (80012a4 <HAL_RCC_OscConfig+0x4f8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f0      	beq.n	800108a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d106      	bne.n	80010be <HAL_RCC_OscConfig+0x312>
 80010b0:	4b7b      	ldr	r3, [pc, #492]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	4a7a      	ldr	r2, [pc, #488]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6213      	str	r3, [r2, #32]
 80010bc:	e02d      	b.n	800111a <HAL_RCC_OscConfig+0x36e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x334>
 80010c6:	4b76      	ldr	r3, [pc, #472]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	4a75      	ldr	r2, [pc, #468]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 80010cc:	f023 0301 	bic.w	r3, r3, #1
 80010d0:	6213      	str	r3, [r2, #32]
 80010d2:	4b73      	ldr	r3, [pc, #460]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	4a72      	ldr	r2, [pc, #456]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	f023 0304 	bic.w	r3, r3, #4
 80010dc:	6213      	str	r3, [r2, #32]
 80010de:	e01c      	b.n	800111a <HAL_RCC_OscConfig+0x36e>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2b05      	cmp	r3, #5
 80010e6:	d10c      	bne.n	8001102 <HAL_RCC_OscConfig+0x356>
 80010e8:	4b6d      	ldr	r3, [pc, #436]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4a6c      	ldr	r2, [pc, #432]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	6213      	str	r3, [r2, #32]
 80010f4:	4b6a      	ldr	r3, [pc, #424]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	4a69      	ldr	r2, [pc, #420]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6213      	str	r3, [r2, #32]
 8001100:	e00b      	b.n	800111a <HAL_RCC_OscConfig+0x36e>
 8001102:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4a66      	ldr	r2, [pc, #408]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 8001108:	f023 0301 	bic.w	r3, r3, #1
 800110c:	6213      	str	r3, [r2, #32]
 800110e:	4b64      	ldr	r3, [pc, #400]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	4a63      	ldr	r2, [pc, #396]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 8001114:	f023 0304 	bic.w	r3, r3, #4
 8001118:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d015      	beq.n	800114e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001122:	f7ff fb9f 	bl	8000864 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001128:	e00a      	b.n	8001140 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800112a:	f7ff fb9b 	bl	8000864 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	f241 3288 	movw	r2, #5000	; 0x1388
 8001138:	4293      	cmp	r3, r2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e0ab      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001140:	4b57      	ldr	r3, [pc, #348]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0ee      	beq.n	800112a <HAL_RCC_OscConfig+0x37e>
 800114c:	e014      	b.n	8001178 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114e:	f7ff fb89 	bl	8000864 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001156:	f7ff fb85 	bl	8000864 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	f241 3288 	movw	r2, #5000	; 0x1388
 8001164:	4293      	cmp	r3, r2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e095      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800116c:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1ee      	bne.n	8001156 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d105      	bne.n	800118a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800117e:	4b48      	ldr	r3, [pc, #288]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a47      	ldr	r2, [pc, #284]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 8001184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001188:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8081 	beq.w	8001296 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001194:	4b42      	ldr	r3, [pc, #264]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b08      	cmp	r3, #8
 800119e:	d061      	beq.n	8001264 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d146      	bne.n	8001236 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011a8:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <HAL_RCC_OscConfig+0x4fc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fb59 	bl	8000864 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b6:	f7ff fb55 	bl	8000864 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e067      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c8:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f0      	bne.n	80011b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011dc:	d108      	bne.n	80011f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011de:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	492d      	ldr	r1, [pc, #180]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a19      	ldr	r1, [r3, #32]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	430b      	orrs	r3, r1
 8001202:	4927      	ldr	r1, [pc, #156]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 8001204:	4313      	orrs	r3, r2
 8001206:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <HAL_RCC_OscConfig+0x4fc>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120e:	f7ff fb29 	bl	8000864 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001216:	f7ff fb25 	bl	8000864 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e037      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x46a>
 8001234:	e02f      	b.n	8001296 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <HAL_RCC_OscConfig+0x4fc>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fb12 	bl	8000864 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001244:	f7ff fb0e 	bl	8000864 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e020      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f0      	bne.n	8001244 <HAL_RCC_OscConfig+0x498>
 8001262:	e018      	b.n	8001296 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d101      	bne.n	8001270 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e013      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_RCC_OscConfig+0x4f4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	429a      	cmp	r2, r3
 8001282:	d106      	bne.n	8001292 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800128e:	429a      	cmp	r2, r3
 8001290:	d001      	beq.n	8001296 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40007000 	.word	0x40007000
 80012a8:	42420060 	.word	0x42420060

080012ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0d0      	b.n	8001462 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012c0:	4b6a      	ldr	r3, [pc, #424]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d910      	bls.n	80012f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 0207 	bic.w	r2, r3, #7
 80012d6:	4965      	ldr	r1, [pc, #404]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	4313      	orrs	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012de:	4b63      	ldr	r3, [pc, #396]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d001      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e0b8      	b.n	8001462 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d020      	beq.n	800133e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001308:	4b59      	ldr	r3, [pc, #356]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4a58      	ldr	r2, [pc, #352]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001312:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001320:	4b53      	ldr	r3, [pc, #332]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	4a52      	ldr	r2, [pc, #328]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800132a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800132c:	4b50      	ldr	r3, [pc, #320]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	494d      	ldr	r1, [pc, #308]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	4313      	orrs	r3, r2
 800133c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d040      	beq.n	80013cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d107      	bne.n	8001362 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d115      	bne.n	800138a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e07f      	b.n	8001462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d107      	bne.n	800137a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136a:	4b41      	ldr	r3, [pc, #260]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d109      	bne.n	800138a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e073      	b.n	8001462 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137a:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e06b      	b.n	8001462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800138a:	4b39      	ldr	r3, [pc, #228]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f023 0203 	bic.w	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	4936      	ldr	r1, [pc, #216]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800139c:	f7ff fa62 	bl	8000864 <HAL_GetTick>
 80013a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a2:	e00a      	b.n	80013ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013a4:	f7ff fa5e 	bl	8000864 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e053      	b.n	8001462 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ba:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 020c 	and.w	r2, r3, #12
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d1eb      	bne.n	80013a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d210      	bcs.n	80013fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 0207 	bic.w	r2, r3, #7
 80013e2:	4922      	ldr	r1, [pc, #136]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d001      	beq.n	80013fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e032      	b.n	8001462 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d008      	beq.n	800141a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	4916      	ldr	r1, [pc, #88]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	4313      	orrs	r3, r2
 8001418:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d009      	beq.n	800143a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	490e      	ldr	r1, [pc, #56]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800143a:	f000 f821 	bl	8001480 <HAL_RCC_GetSysClockFreq>
 800143e:	4602      	mov	r2, r0
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	490a      	ldr	r1, [pc, #40]	; (8001474 <HAL_RCC_ClockConfig+0x1c8>)
 800144c:	5ccb      	ldrb	r3, [r1, r3]
 800144e:	fa22 f303 	lsr.w	r3, r2, r3
 8001452:	4a09      	ldr	r2, [pc, #36]	; (8001478 <HAL_RCC_ClockConfig+0x1cc>)
 8001454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_RCC_ClockConfig+0x1d0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f9c0 	bl	80007e0 <HAL_InitTick>

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40022000 	.word	0x40022000
 8001470:	40021000 	.word	0x40021000
 8001474:	080015d4 	.word	0x080015d4
 8001478:	20000164 	.word	0x20000164
 800147c:	20000168 	.word	0x20000168

08001480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_RCC_GetSysClockFreq+0x94>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d002      	beq.n	80014b0 <HAL_RCC_GetSysClockFreq+0x30>
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d003      	beq.n	80014b6 <HAL_RCC_GetSysClockFreq+0x36>
 80014ae:	e027      	b.n	8001500 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_RCC_GetSysClockFreq+0x98>)
 80014b2:	613b      	str	r3, [r7, #16]
      break;
 80014b4:	e027      	b.n	8001506 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	0c9b      	lsrs	r3, r3, #18
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	4a17      	ldr	r2, [pc, #92]	; (800151c <HAL_RCC_GetSysClockFreq+0x9c>)
 80014c0:	5cd3      	ldrb	r3, [r2, r3]
 80014c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d010      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_RCC_GetSysClockFreq+0x94>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	0c5b      	lsrs	r3, r3, #17
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	4a11      	ldr	r2, [pc, #68]	; (8001520 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014da:	5cd3      	ldrb	r3, [r2, r3]
 80014dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <HAL_RCC_GetSysClockFreq+0x98>)
 80014e2:	fb02 f203 	mul.w	r2, r2, r3
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e004      	b.n	80014fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	613b      	str	r3, [r7, #16]
      break;
 80014fe:	e002      	b.n	8001506 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_RCC_GetSysClockFreq+0x98>)
 8001502:	613b      	str	r3, [r7, #16]
      break;
 8001504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001506:	693b      	ldr	r3, [r7, #16]
}
 8001508:	4618      	mov	r0, r3
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
 8001518:	007a1200 	.word	0x007a1200
 800151c:	080015e4 	.word	0x080015e4
 8001520:	080015f4 	.word	0x080015f4
 8001524:	003d0900 	.word	0x003d0900

08001528 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <RCC_Delay+0x34>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <RCC_Delay+0x38>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0a5b      	lsrs	r3, r3, #9
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001544:	bf00      	nop
  }
  while (Delay --);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1e5a      	subs	r2, r3, #1
 800154a:	60fa      	str	r2, [r7, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f9      	bne.n	8001544 <RCC_Delay+0x1c>
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	20000164 	.word	0x20000164
 8001560:	10624dd3 	.word	0x10624dd3

08001564 <__libc_init_array>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	2600      	movs	r6, #0
 8001568:	4d0c      	ldr	r5, [pc, #48]	; (800159c <__libc_init_array+0x38>)
 800156a:	4c0d      	ldr	r4, [pc, #52]	; (80015a0 <__libc_init_array+0x3c>)
 800156c:	1b64      	subs	r4, r4, r5
 800156e:	10a4      	asrs	r4, r4, #2
 8001570:	42a6      	cmp	r6, r4
 8001572:	d109      	bne.n	8001588 <__libc_init_array+0x24>
 8001574:	f000 f822 	bl	80015bc <_init>
 8001578:	2600      	movs	r6, #0
 800157a:	4d0a      	ldr	r5, [pc, #40]	; (80015a4 <__libc_init_array+0x40>)
 800157c:	4c0a      	ldr	r4, [pc, #40]	; (80015a8 <__libc_init_array+0x44>)
 800157e:	1b64      	subs	r4, r4, r5
 8001580:	10a4      	asrs	r4, r4, #2
 8001582:	42a6      	cmp	r6, r4
 8001584:	d105      	bne.n	8001592 <__libc_init_array+0x2e>
 8001586:	bd70      	pop	{r4, r5, r6, pc}
 8001588:	f855 3b04 	ldr.w	r3, [r5], #4
 800158c:	4798      	blx	r3
 800158e:	3601      	adds	r6, #1
 8001590:	e7ee      	b.n	8001570 <__libc_init_array+0xc>
 8001592:	f855 3b04 	ldr.w	r3, [r5], #4
 8001596:	4798      	blx	r3
 8001598:	3601      	adds	r6, #1
 800159a:	e7f2      	b.n	8001582 <__libc_init_array+0x1e>
 800159c:	080015f8 	.word	0x080015f8
 80015a0:	080015f8 	.word	0x080015f8
 80015a4:	080015f8 	.word	0x080015f8
 80015a8:	080015fc 	.word	0x080015fc

080015ac <memset>:
 80015ac:	4603      	mov	r3, r0
 80015ae:	4402      	add	r2, r0
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d100      	bne.n	80015b6 <memset+0xa>
 80015b4:	4770      	bx	lr
 80015b6:	f803 1b01 	strb.w	r1, [r3], #1
 80015ba:	e7f9      	b.n	80015b0 <memset+0x4>

080015bc <_init>:
 80015bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015be:	bf00      	nop
 80015c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015c2:	bc08      	pop	{r3}
 80015c4:	469e      	mov	lr, r3
 80015c6:	4770      	bx	lr

080015c8 <_fini>:
 80015c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ca:	bf00      	nop
 80015cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ce:	bc08      	pop	{r3}
 80015d0:	469e      	mov	lr, r3
 80015d2:	4770      	bx	lr
